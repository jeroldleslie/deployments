# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# see kafka.producer.ProducerConfig for more details

############################# Producer Basics #############################

# list of brokers used for bootstrapping knowledge about the rest of the cluster
# format: host1:port1,host2:port2 ...
metadata.broker.list={% for host in groups['kafka'] %}{{ host }}:{{ port }},{% endfor %}

# name of the partitioner class for partitioning events; default partition spreads data randomly
#partitioner.class={{ partitioner_class }}

# specifies whether the messages are sent asynchronously (async) or synchronously (sync)
producer.type={{ producer_type }}

# specify the compression codec for all data generated: none , gzip, snappy.
# the old config values work as well: 0, 1, 2 for none, gzip, snappy, respectivally
compression.codec={{ compression_codec }}

# message encoder
serializer.class={{ serializer_class }}

# allow topic level compression
#compressed.topics= {{ compressed_topics }}

############################# Async Producer #############################
# maximum time, in milliseconds, for buffering data on the producer queue 
#queue.buffering.max.ms={{ queue_buffering_max_ms }}

# the maximum size of the blocking queue for buffering on the producer 
#queue.buffering.max.messages={{ queue_buffering_max_messages }}

# Timeout for event enqueue:
# 0: events will be enqueued immediately or dropped if the queue is full
# -ve: enqueue will block indefinitely if the queue is full
# +ve: enqueue will block up to this many milliseconds if the queue is full
#queue.enqueue.timeout.ms={{ queue_enqueue_timeout_ms }}

# the number of messages batched at the producer 
#batch.num.messages={{ batch_num_messages }}
