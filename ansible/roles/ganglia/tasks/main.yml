---
- name: Install epel-release
  sudo: yes
  yum: name=epel-release state=installed
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: install ganglia client (Ubuntu)
  apt: pkg='ganglia-monitor' state=latest
  sudo: yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' 

- name: Install ganglia client packages (CentOS)
  yum: name={{ item }} state=installed
  sudo: yes
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  with_items:
    - ganglia-gmond
    - ganglia-gmond-python.x86_64
    - lsof


- name: Give ganglia user home directory (to support lsof plugin)
  sudo: yes
  lineinfile:  "dest=/etc/passwd state=present  regexp=\"ganglia.*\"  line=\"ganglia:x:998:996:Ganglia Monitoring System:/var/lib/:/bin/bash\""
  
- name: Give ganglia user sudo (to support lsof plugin)
  sudo: yes
  lineinfile:  "dest=/etc/sudoers  state=present line=\"ganglia       ALL=(ALL) NOPASSWD: ALL\""

#http://unix.stackexchange.com/questions/122616/why-do-i-need-a-tty-to-run-sudo-if-i-can-sudo-without-a-password
#- name: Remove requiretty (to support lsof plugin)
#  sudo: yes
#  lineinfile: dest=/etc/sudoers  state=absent regexp="Defaults\s*requiretty"

- name: Remove requiretty (to support lsof plugin)
  sudo: yes
  lineinfile: "dest=/etc/sudoers state=present line=\"Defaults:ganglia !requiretty\""


- name: Make sure crond is installed (CentOS)
  yum: name='cronie' state=installed
  sudo: yes
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Check if crond is running (Docker)
  shell: ps -ax | grep crond | grep -v grep | wc -l
  register: crond_running
  when: ansible_virtualization_type == 'docker'

- name: Make sure crond is started (Docker)
  shell: crond
  sudo: yes
  when: ansible_virtualization_type == 'docker' and crond_running.stdout == "0"

- name: Move gmond config
  template: src=../templates/gmond.conf.j2  dest=/etc/ganglia/gmond.conf
  sudo: yes

- name: Create ganglia home for custom perl scripts
  file: path={{ganglia_home}} state=directory mode=0755

- name: Move ganglia perl plugins to ganglia_home
  copy: src=../plugins/ dest={{ganglia_home}} mode=0755

- name: Move ganglia python plugins
  template: src=../templates/{{ item }}.py.j2  dest=/usr/lib64/ganglia/python_modules/{{ item }}.py
  sudo: yes
  with_items:
    - lsof_counter

- name: Move ganglia python plugins configs
  template: src=../templates/{{ item }}.pyconf.j2  dest=/etc/ganglia/conf.d/{{ item }}.pyconf
  sudo: yes
  with_items:
    - lsof_counter

- name: Get current crontab 
  shell: crontab -l
  register: crontab_out
  sudo: yes
  ignore_errors: yes

- name: Write current crontab to temp file
  shell: "printf \"\n{{crontab_out.stdout}}\n\" > /tmp/cron "
  sudo: yes

- name: Get disk partitions
  shell: cat /proc/partitions | awk '{print $4}' | grep -E "(vda|sda)"
  register: disk_partitions

- name: Add all cronjobs to temp file (non-Docker)
  shell: "echo \"* * * * * $(which perl) {{ganglia_home}}/diskio.pl {{ item }}\" >> /tmp/cron"
  sudo: yes
  with_items:
    - "{{ disk_partitions.stdout_lines }}"


- name: Write cronjob for ganglia perl plugins
  shell: crontab /tmp/cron
  sudo: yes


- name: Restart ganglia client service (Ubuntu)
  #command: /etc/init.d/ganglia-monitor restart
  service: name=ganglia-monitor state=restarted
  sudo: yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  
- name: Restart ganglia client service (CentOS)
  service: name=gmond state=stopped
  sudo: yes
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  when: ansible_virtualization_type != 'docker'

- name: Restart ganglia client service (CentOS)
  service: name=gmond state=started enabled=yes
  sudo: yes
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  when: ansible_virtualization_type != 'docker'
  

- name: Start gmond manually
  shell: "/usr/sbin/gmond"
  sudo: yes
  when: ansible_virtualization_type == 'docker'