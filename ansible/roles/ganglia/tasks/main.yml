---

#Include variables from file
- include_vars: "../../../profile/{{ profile_type | default('default') }}.yml"
  tags: 
    [ configure, install, start, stop, force-stop ]
  #when: ansible_virtualization_type != 'docker'

- name: Profile type
  local_action: debug msg="{{ profile_type | default('default') }}"
  run_once: true
  tags: [ configure, install, clean, start, stop, force-stop ]

  #To avoid Ubuntu issue running CentOS container
- name: Get OS of host
  local_action: shell python -c "import platform; print platform.dist()[0].lower().rstrip()"
  register: host_os_info
  run_once: true
  tags: [ configure, install, clean, start, stop, force-stop ]


- name: Install epel-release
  sudo: yes
  yum: name=epel-release state=installed
  when: not ( host_os_info.stdout == "ubuntu" and ansible_virtualization_type == 'docker' )
  tags:
    - install

- name: Install ganglia client packages (CentOS)
  yum: name={{ item }} state=installed
  sudo: yes
  when: not ( host_os_info.stdout == "ubuntu" and ansible_virtualization_type == 'docker' )
  with_items:
    - ganglia-gmond
    - ganglia-gmond-python.x86_64
    - lsof
  tags:
    - install

- name: Give ganglia user home directory (to support lsof plugin)
  sudo: yes
  lineinfile:  "dest=/etc/passwd state=present  regexp=\"ganglia.*\"  line=\"ganglia:x:998:996:Ganglia Monitoring System:/var/lib/:/bin/bash\""
  when: not ( host_os_info.stdout == "ubuntu" and ansible_virtualization_type == 'docker' )
  tags:
    - install
  
- name: Give ganglia user sudo (to support lsof plugin)
  sudo: yes
  lineinfile:  "dest=/etc/sudoers  state=present line=\"ganglia       ALL=(ALL) NOPASSWD: ALL\""
  when: not ( host_os_info.stdout == "ubuntu" and ansible_virtualization_type == 'docker' )
  tags:
    - install

- name: Remove requiretty (to support lsof plugin)
  sudo: yes
  lineinfile: "dest=/etc/sudoers state=present line=\"Defaults:ganglia !requiretty\""
  when: not ( host_os_info.stdout == "ubuntu" and ansible_virtualization_type == 'docker' )
  tags:
    - install


- name: Make sure crond is installed (CentOS)
  yum: name='cronie' state=installed
  sudo: yes
  when: not ( host_os_info.stdout == "ubuntu" and ansible_virtualization_type == 'docker' )
  tags:
    - install

- name: Check if crond is running (Docker)
  shell: ps -ax | grep crond | grep -v grep | wc -l
  register: crond_running
  when: ansible_virtualization_type == 'docker' and not ( host_os_info.stdout == "ubuntu" and ansible_virtualization_type == 'docker' )
  tags:
    - install

- name: Make sure crond is started (Docker)
  shell: crond
  sudo: yes
  when: ansible_virtualization_type == 'docker' and crond_running.stdout == "0" and not ( host_os_info.stdout == "ubuntu" and ansible_virtualization_type == 'docker' )
  tags:
    - install
    
- name: Move gmond config
  template: src=../templates/gmond.conf.j2  dest=/etc/ganglia/gmond.conf
  sudo: yes
  when: not ( host_os_info.stdout == "ubuntu" and ansible_virtualization_type == 'docker' )
  tags:
    [ install,configure ]

- name: Move ganglia python plugins
  template: src=../templates/{{ item }}.py.j2  dest=/usr/lib64/ganglia/python_modules/{{ item }}.py
  sudo: yes
  when: not ( host_os_info.stdout == "ubuntu" and ansible_virtualization_type == 'docker' )
  with_items:
    - lsof_counter
    - hiccup_catcher
  tags:
    - install

- name: Move ganglia python plugins configs
  template: src=../templates/{{ item }}.pyconf.j2  dest=/etc/ganglia/conf.d/{{ item }}.pyconf
  sudo: yes
  when: not ( host_os_info.stdout == "ubuntu" and ansible_virtualization_type == 'docker' )
  with_items:
    - lsof_counter
    - hiccup_catcher
  tags:
    - install

      
- name: Restart ganglia client service (CentOS)
  service: name=gmond state=restarted
  sudo: yes
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  when: ansible_virtualization_type != 'docker'
  tags:
    - install

- name: Stop ganglia client service (CentOS)
  service: name=gmond state=stopped
  sudo: yes
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  when: ansible_virtualization_type != 'docker'
  tags:
    - stop

- name: Kill ganglia client
  shell: kill -9 $(ps -ef | grep gmond | grep -v grep | awk '{print $2}')
  sudo: yes
  ignore_errors: yes
  when: not ( host_os_info.stdout == "ubuntu" and ansible_virtualization_type == 'docker' )
  tags:
    - force-stop
    
- name: Start ganglia client service (CentOS)
  service: name=gmond state=started
  sudo: yes
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  when: ansible_virtualization_type != 'docker'
  tags:
    - start
    
- name: Start gmond manually
  shell: "/usr/sbin/gmond"
  sudo: yes
  when: ansible_virtualization_type == 'docker' and not ( host_os_info.stdout == "ubuntu" and ansible_virtualization_type == 'docker' )
  tags:
    - start

# - name: Create ganglia home for custom scripts
#   file: path={{monitoring.software.installation.ganglia_home}} state=directory mode=0755
#   tags:
#     - install
# - name: Move ganglia plugins to ganglia_home
#   copy: src=../plugins/ dest={{monitoring.software.installation.ganglia_home}} mode=0755
#   tags:
#     - install
    
# - name: Get current crontab 
#   shell: crontab -l
#   register: crontab_out
#   sudo: yes
#   ignore_errors: yes
#   tags:
#     - install
    
# - name: Write current crontab to temp file
#   shell: "printf \"\n{{crontab_out.stdout}}\" > /tmp/cron "
#   sudo: yes
#   tags:
#     - install
    
# - name: Get disk partitions
#   shell: cat /proc/partitions | awk '{print $4}' | grep -E "(vda|sda)"
#   register: disk_partitions
#   tags:
#     - install
    
# - name: Add all cronjobs to temp file (non-Docker)
#   shell: "echo \"* * * * * $(which perl) {{monitoring.software.installation.ganglia_home}}/diskio.pl {{ item }}\" >> /tmp/cron"
#   sudo: yes
#   with_items:
#     - "{{ disk_partitions.stdout_lines }}"
#   tags:
#     - install
    
# - name: Write cronjob
#   shell: crontab /tmp/cron
#   sudo: yes
#   tags:
#     - install
