
- name: Update maximum number of open files per process (soft)
  sudo: yes
  lineinfile: dest=/etc/security/limits.conf insertbefore='# End of file' line='*             soft    nofile          32000' state=present
  tags:
    [ install, configure ]

- name: Update maximum number of open files per process (hard)
  sudo: yes
  lineinfile: dest=/etc/security/limits.conf insertbefore='# End of file' line='*             hard    nofile          32000' state=present
  tags:
    [ install, configure ]

# core
# limits the core file size (KB)
# data
# maximum data size (KB)
# fsize
# maximum filesize (KB)
# memlock
# maximum locked-in-memory address space (KB)
# nofile
# maximum number of open files
# rss
# maximum resident set size (KB) (Ignored in Linux 2.4.30 and higher)
# stack
# maximum stack size (KB)
# cpu
# maximum CPU time (minutes)
# nproc
# maximum number of processes
# as
# address space limit (KB)
# maxlogins
# maximum number of logins for this user except for this with uid=0
# maxsyslogins
# maximum number of all logins on system
# priority
# the priority to run user process with (negative values boost process priority)
# locks
# maximum locked files (Linux 2.4 and higher)
# sigpending
# maximum number of pending signals (Linux 2.6 and higher)
# msgqueue
# maximum memory used by POSIX message queues (bytes) (Linux 2.6 and higher)
# nice
# maximum nice priority allowed to raise to (Linux 2.6.12 and higher) values: [-20,19]
# rtprio
# maximum realtime priority allowed for non-privileged processes (Linux 2.6.12 and higher)
# All items support the values -1, unlimited or infinity indicating no limit, except for priority and nice.



# Swappiness is a Linux kernel parameter that controls the relative weight given to swapping out runtime memory, as opposed to dropping pages from the system page cache. Swappiness can be set to values between 0 and 100 inclusive.
- name: VM Swappiness
  sysctl: name=vm.swappiness value=5 state=present
  sudo: yes
  tags:
    [ install, configure ]

# A kernel panic is an action taken by an operating system upon detecting an internal fatal error from which it cannot safely recover. The term is largely specific to Unix and Unix-like systems; for Microsoft Windows operating systems the equivalent term is "stop error" (or, colloquially, "Blue Screen of Death").
- name: Kernel Panic
  sysctl: name=kernel.panic state=absent
  sudo: yes
  tags:
    [ install, configure ]


# This sets the max OS receive buffer size for all types of connections.
- sysctl: name=net.core.rmem_max value=16777216 state=present
  sudo: yes
  when: ansible_virtualization_type != 'docker' 
  tags:
    [ install, configure ]

# This sets the max OS send buffer size for all types of connections.
- sysctl: name=net.core.wmem_max=16777216 state=present
  sudo: yes
  when: ansible_virtualization_type != 'docker' 
  tags:
    [ install, configure ]

#TCP Autotuning setting. "The first value tells the kernel the minimum receive buffer for each TCP connection, and this buffer is always allocated to a TCP socket, even under high pressure on the system. ... The second value specified tells the kernel the default receive buffer allocated for each TCP socket. This value overrides the /proc/sys/net/core/rmem_default value used by other protocols. ... The third and last value specified in this variable specifies the maximum receive buffer that can be allocated for a TCP socket." 
- sysctl: name=net.ipv4.tcp_rmem value='4096 87380 16777216' state=present
  sudo: yes
  when: ansible_virtualization_type != 'docker' 
  tags:
    [ install, configure ]

#TCP Autotuning setting. "This variable takes 3 different values which holds information on how much TCP sendbuffer memory space each TCP socket has to use. Every TCP socket has this much buffer space to use before the buffer is filled up. Each of the three values are used under different conditions. ... The first value in this variable tells the minimum TCP send buffer space available for a single TCP socket. ... The second value in the variable tells us the default buffer space allowed for a single TCP socket to use. ... The third value tells the kernel the maximum TCP send buffer space." 
- sysctl: name=net.ipv4.tcp_wmem value='4096 87380 16777216' state=present
  sudo: yes
  when: ansible_virtualization_type != 'docker' 
  tags:
    [ install, configure ]

# For servers that receive many connections at the same time, the TIME-WAIT sockets for new connections can be reused
- sysctl: name=net.ipv4.tcp_tw_reuse value=1 state=present
  sudo: yes
  when: ansible_virtualization_type != 'docker' 
  tags:
    [ install, configure ]

- sysctl: name=net.ipv4.tcp_tw_recycle value=1 state=present
  sudo: yes
  when: ansible_virtualization_type != 'docker' 
  tags:
    [ install, configure ]

- sysctl: name=net.ipv4.tcp_fin_timeout value=30 state=present
  sudo: yes
  when: ansible_virtualization_type != 'docker' 
  tags:
    [ install, configure ]

# TCP SYN cookie protection (default) helps protect against SYN flood attacks only kicks in when net.ipv4.tcp_max_syn_backlog is reached
# kernel message: [84440.731929] possible SYN flooding on port 80. Sending cookies.
- sysctl: name=net.ipv4.tcp_syncookies value=1 state=present
  sudo: yes
  when: ansible_virtualization_type != 'docker' 
  tags:
    [ install, configure ]

- sysctl: name=net.ipv4.tcp_max_syn_backlog value=65536 state=present
  sudo: yes
  when: ansible_virtualization_type != 'docker' 
  tags:
    [ install, configure ]
